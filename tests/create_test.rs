use std::{collections::HashMap, fs::File, io::Read};

use camino::Utf8PathBuf;
use itertools::Itertools;
use tar::Archive;
use tempdir::TempDir;

#[test]
fn create() {
    let tmp_dir = TempDir::new("cargo-skeleton").expect("creating temp dir");

    let out_path: Utf8PathBuf = tmp_dir
        .path()
        .join("skeleton.tar")
        .try_into()
        .expect("converting path to UTF-8");

    let metadata = cargo_metadata::MetadataCommand::new()
        .exec().expect("running cargo metadata");

    cargo_skeleton::create::create_skeleton(metadata, out_path.clone())
        .expect("creating skeleton");

    let file = File::open(&out_path).expect("opening out file");
    let mut ar = Archive::new(file);

    let entries = ar.entries().expect("getting archive entries");

    let mut files: HashMap<String,String> = HashMap::new();

    for entry in entries {
        let mut entry = entry.unwrap();

        let path = entry
            .header()
            .path()
            .unwrap()
            .into_owned()
            .to_str()
            .unwrap()
            .to_string();

        let mut buf = String::new();

        entry.read_to_string(&mut buf).expect("reading file");

        files.insert(path, buf);
    }

    macro_rules! assert_generated {
        ($x:expr) => {
            assert!(files.get($x).expect("missing file").contains("@generated by Cargo Skeleton"));
        };
    }

    assert_generated!("src/main.rs");
    assert_generated!("src/lib.rs");
    assert_generated!("tests/create_test.rs");

    // TODO: assert has same contents
    assert!(files.contains_key("Cargo.lock"));
    assert!(files.contains_key("Cargo.toml"));

    // TODO: assert snapshot maybe?
    assert!(files.contains_key("Skeleton.lock"));
}
