use std::{fs::File, io::Read};

use anyhow::{bail, Context, Result};
use camino::Utf8Path;
use serde::{Deserialize, Serialize};

use crate::package::Package;

/// The standard file name used for the lockfile on disk.
pub const LOCKFILE_NAME: &str = "Skeleton.lock";

const HEADER_COMMENT: &str = r##"# This file is automatically @generated by Cargo Skeleton.
# It is not intended for manual editing.

"##;

// TODO: we should probably track the flags used when it was generated,
// so we can bail if they do not match when we build.
// And probably a version too, in case the layer cache is stale.

/// Meta information for all local packages within a skeleton
/// directory tree. The lockfile records the exact dependencies
/// needed to build the package as resolved by Cargo.
#[derive(Debug, Default, Serialize, Deserialize)]
pub struct Lockfile {
    #[serde(rename = "package")]
    pub packages: Vec<Package>,
}

impl Lockfile {
    // Serialize the Lockfile to a TOML string.
    pub fn to_string(&mut self) -> String {
        self.packages.sort();
        for pkg in self.packages.iter_mut() {
            pkg.dependencies.sort();
        }

        let mut out = String::new();

        out.push_str(&HEADER_COMMENT);
        out.push_str(&toml::to_string_pretty(&self).unwrap());

        out
    }
}

/// Load the workspace's lockfile from disk.
pub fn load_lockfile(workspace_root: &Utf8Path) -> Result<Lockfile> {
    let path = workspace_root.join(LOCKFILE_NAME);

    if !path.exists() {
        bail!(
            "Failed to read {} from workspace directory {}",
            LOCKFILE_NAME,
            workspace_root
        );
    }

    let mut file = File::open(path).context("opening lockfile")?;

    let mut buf = String::new();

    file.read_to_string(&mut buf).context("reading lockfile")?;

    let lockfile: Lockfile = toml::from_str(&buf).context("parsing lockfile")?;

    Ok(lockfile)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn lockfile_to_string() {
        let mut lockfile = Lockfile {
            packages: vec![
                Package {
                    name: "foo".into(),
                    id: "file:///foo".into(),
                    dependencies: vec!["file:///bar".into(), "baz".into()],
                },
                Package {
                    name: "bar".into(),
                    id: "file:///bar".into(),
                    dependencies: vec!["baz".into()],
                },
            ],
        };

        let out = lockfile.to_string();

        let expected = r##"# This file is automatically @generated by Cargo Skeleton.
# It is not intended for manual editing.

[[package]]
name = "bar"
id = "file:///bar"
dependencies = ["baz"]

[[package]]
name = "foo"
id = "file:///foo"
dependencies = [
    "baz",
    "file:///bar",
]
"##;

        assert_eq!(expected, out);
    }
}
